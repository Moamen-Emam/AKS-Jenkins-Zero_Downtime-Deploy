pipeline {
    agent {
        label 'ubuntu16'
    }

    environment {
        servicePrincipalId = 'your-service-principal'
        resourceGroup = 'your-resource-group-name'
        aks = 'your-kubernetes-cluster-name'
        dockerRegistry = 'your-acr-name.azurecr.io'
        imageName = "tomcat:${env.BUILD_NUMBER}"
        IMAGE_TAG = "${dockerRegistry}/${imageName}"
        dockerCredentialId = 'your-acr-credential-id'
        currentEnvironment = 'blue'
        newEnvironment = { ->
            currentEnvironment == 'blue' ? 'green' : 'blue'
        }
        expectedTomcatVersion = '<version>' // Update this with the desired version
    }

    stages {
        stage('Pre-clean: Clean Workspace') {
            steps {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }

        stage('SCM Checkout') {
            steps {
                echo 'Checking out source code...'
                git branch: 'main', credentialsId: 'your-git-credentials', url: 'https://<target-repo>.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                withDockerRegistry([credentialsId: dockerCredentialId, url: "http://${dockerRegistry}"]) {
                    sh """
                        docker build -t "${IMAGE_TAG}" .
                        docker push "${IMAGE_TAG}"
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                // Apply the deployments to AKS.
                // With enableConfigSubstitution set to true, the variables ${TARGET_ROLE}, ${TOMCAT_VERSION} 
                // will be replaced with environment variable values
                acsDeploy azureCredentialsId: 'sp',
                          configFilePaths: "K8s_Resources/deployment-rolling.yml",
                          containerService: "$aks | AKS",
                          resourceGroupName: resourceGroup,
                          enableConfigSubstitution: true
            }
        }

        stage('Verify') {
            steps {
                // verify the production environment is working properly
                verifyEnvironment('tomcat-service-rolling', expectedTomcatVersion())
            }
        }

        stage('Post-clean') {
            steps {
                sh 'rm -f kubeconfig'
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}

def verifyEnvironment = { service, version ->
    withCredentials([azureServicePrincipal('servicePrincipalId')]) {
        // fetch the current service configuration
        sh """
          az login --service-principal -u "\$AZURE_CLIENT_ID" -p "\$AZURE_CLIENT_SECRET" -t "\$AZURE_TENANT_ID"
          az account set --subscription "\$AZURE_SUBSCRIPTION_ID"
          az aks get-credentials --resource-group "${resourceGroup}" --name "${aks}" --admin --file kubeconfig
          az logout
          endpoint_ip="\$(kubectl --kubeconfig=kubeconfig get services '${service}' --output json | jq -r '.status.loadBalancer.ingress[0].ip')"
          count=0
          while true; do
              count=\$(expr \$count + 1)
              if curl -m 10 "http://\$endpoint_ip" | grep -o "Apache Tomcat/${version}"; then
                  break;
              fi
              if [ "\$count" -gt 30 ]; then
                  echo 'Timeout while waiting for the ${service} endpoint to be ready'
                  exit 1
              fi
              echo "${service} endpoint is not ready, wait 10 seconds..."
              sleep 10
          done
        """
    }
}
