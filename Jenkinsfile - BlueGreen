pipeline {
    agent {
        label 'ubuntu16'
    }

    environment {
        servicePrincipalId = 'your-service-principal'
        resourceGroup = 'your-resource-group-name'
        aks = 'your-kubernetes-cluster-name'
        dockerRegistry = 'your-acr-name.azurecr.io'
        imageName = "tomcat:${env.BUILD_NUMBER}"
        IMAGE_TAG = "${dockerRegistry}/${imageName}"
        dockerCredentialId = 'your-acr-credential-id'
        currentEnvironment = 'blue'
        newEnvironment = { ->
            currentEnvironment == 'blue' ? 'green' : 'blue'
        }
        expectedTomcatVersion = '<version>' // Update this with the desired version
    }

    stages {
        stage('Pre-clean: Clean Workspace') {
            steps {
                echo 'Cleaning workspace...'
                cleanWs()
            }
        }

        stage('SCM Checkout') {
            steps {
                echo 'Checking out source code...'
                git branch: 'main', credentialsId: 'your-git-credentials', url: 'https://<target-repo>.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                withDockerRegistry([credentialsId: dockerCredentialId, url: "http://${dockerRegistry}"]) {
                    sh """
                        docker build -t "${IMAGE_TAG}" .
                        docker push "${IMAGE_TAG}"
                    """
                }
            }
        }

        stage('Check Env') {
            steps {
                echo 'Checking Env...'
                script {
                    withCredentials([azureServicePrincipal(servicePrincipalId)]) {
                        sh """
                            az login --service-principal -u "\$AZURE_CLIENT_ID" -p "\$AZURE_CLIENT_SECRET" -t "\$AZURE_TENANT_ID"
                            az account set --subscription "\$AZURE_SUBSCRIPTION_ID"
                            az aks get-credentials --resource-group "${resourceGroup}" --name "${aks}" --admin --file kubeconfig
                            az logout
                            current_role="\$(kubectl --kubeconfig kubeconfig get services tomcat-service --output json | jq -r .spec.selector.role)"
                            if [ "\$current_role" = null ]; then
                                echo "Unable to determine current environment"
                                exit 1
                            fi
                            echo "\$current_role" > current-environment
                        """
                    }

                    // parse the current active backend
                    currentEnvironment = readFile('current-environment').trim()

                    // set the build name
                    echo "***************************  CURRENT: ${currentEnvironment}     NEW: ${newEnvironment()}  *****************************"
                    currentBuild.displayName = newEnvironment().toUpperCase() + ' ' + imageName
                    TARGET_ROLE = newEnvironment()

                    // clean the inactive environment
                    sh """
                        kubectl --kubeconfig=kubeconfig delete deployment "tomcat-deployment-\$TARGET_ROLE"
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                acsDeploy azureCredentialsId: servicePrincipalId,
                          resourceGroupName: resourceGroup,
                          containerService: "${aks} | AKS",
                          configFilePaths: 'K8s_Resources/deployment.yml',
                          enableConfigSubstitution: true,
                          secretName: dockerRegistry,
                          containerRegistryCredentials: [[credentialsId: dockerCredentialId, url: "http://${dockerRegistry}"]]
            }
        }

        stage('Verify Staged') {
            steps {
                // verify the deployment through the corresponding test endpoint
                verifyEnvironment("tomcat-test-${newEnvironment()}", expectedTomcatVersion)
            }
        }

        stage('Confirm') {
            steps {
                mail (to: 'to@example.com',
                    subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) is waiting for input",
                    body: "Please go to ${env.BUILD_URL}.")
                input 'Ready to go?'
            }
        }

        stage('Switch') {
            steps {
                acsDeploy azureCredentialsId: servicePrincipalId,
                          resourceGroupName: resourceGroup,
                          containerService: "${aks} | AKS",
                          configFilePaths: 'K8s_Resources/service.yml',
                          enableConfigSubstitution: true
            }
        }

        stage('Verify Prod') {
            steps {
                // verify the production environment is working properly
                verifyEnvironment('tomcat-service', expectedTomcatVersion)
            }
        }

        stage('Post-clean') {
            steps {
                sh 'rm -f kubeconfig'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

def verifyEnvironment = { service, version ->
    sh """
        endpoint_ip="\$(kubectl --kubeconfig=kubeconfig get services '${service}' --output json | jq -r '.status.loadBalancer.ingress[0].ip')"
        count=0
        while true; do
            count=\$(expr \$count + 1)
            if curl -m 10 "http://\$endpoint_ip" | grep -o "Apache Tomcat/${version}"; then
                break;
            fi
            if [ "\$count" -gt 30 ]; then
                echo 'Timeout while waiting for the ${service} endpoint to be ready'
                exit 1
            fi
            echo "${service} endpoint is not ready, wait 10 seconds..."
            sleep 10
        done
    """
}
